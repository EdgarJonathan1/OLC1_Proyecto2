/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[5,7,23],$V3=[2,7],$V4=[1,22],$V5=[1,25],$V6=[1,24],$V7=[1,29],$V8=[1,31],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[2,7,9,12,19,22,23,52,53,54,55],$Ve=[1,40],$Vf=[1,41],$Vg=[31,33,51],$Vh=[2,61],$Vi=[1,52],$Vj=[1,55],$Vk=[1,50],$Vl=[1,51],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[2,7,9,11,12,19,22,23,38,41,42,44,52,53,54,55,59,66,71,72,73,74,75,76],$Vt=[1,69],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,83],$VE=[1,82],$VF=[1,84],$VG=[1,85],$VH=[14,31,56,57,58,60,61,62,63,64,65,66,67,68,69],$VI=[1,89],$VJ=[1,90],$VK=[1,98],$VL=[20,31],$VM=[1,129],$VN=[1,130],$VO=[1,131],$VP=[1,133],$VQ=[14,33],$VR=[14,31,56,57,60,61,62,63,64,65],$VS=[14,31,56,57,64,65],$VT=[14,31,56,57,60,61,62,63,64,65,66,67],$VU=[14,31,56,57,60,61,62,63,64,65,66,67,68,69],$VV=[2,7,9,12,19,22,23,38,41,42,44,47,52,53,54,55],$VW=[1,144],$VX=[2,12,19,22,38,41,42,44,52,53,54,55],$VY=[1,178],$VZ=[2,12,19,22,38,41,42,44,47,52,53,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"MAIN":6,"rpublic":7,"rstatic":8,"rvoid":9,"rmain":10,"sparizq":11,"rstring":12,"rargs":13,"sparder":14,"STATCOR":15,"INSTRUCCION":16,"MODIFICADOR":17,"CLASE_INTERFACE":18,"tkidentificador":19,"sllaveizq":20,"INS_METODO":21,"sllaveder":22,"rprivate":23,"rclass":24,"rinterface":25,"DECLARA_ASIGN":26,"IMP_METODO":27,"DEC_METODO":28,"TIPO_DATO":29,"PARAMETROS":30,"spuntocoma":31,"LIST_PAR":32,"scoma":33,"LI":34,"SENTENCIA_REPETICION":35,"SENTENCIA_CONTROL":36,"IF":37,"rfor":38,"EXP":39,"EXP_AUMENTO":40,"rwhile":41,"rdo":42,"LISTA_IF":43,"rif":44,"OTHERELSE":45,"LELSEIF":46,"relse":47,"ELSEIF":48,"STATCORPRIMA":49,"LISTA_ID":50,"sigual":51,"rint":52,"rbool":53,"rfloat":54,"rchar":55,"sand":56,"sor":57,"sxor":58,"snot":59,"smayque":60,"smenque":61,"smayigque":62,"smenigque":63,"sdobleig":64,"snoig":65,"smenos":66,"smas":67,"spor":68,"sdiv":69,"VALOR":70,"tkstring":71,"tkstring2":72,"rfalse":73,"rtrue":74,"tkflotante":75,"tkentero":76,"adicion":77,"sustraccion":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"rpublic",8:"rstatic",9:"rvoid",10:"rmain",11:"sparizq",12:"rstring",13:"rargs",14:"sparder",19:"tkidentificador",20:"sllaveizq",22:"sllaveder",23:"rprivate",24:"rclass",25:"rinterface",31:"spuntocoma",33:"scoma",38:"rfor",41:"rwhile",42:"rdo",44:"rif",47:"relse",51:"sigual",52:"rint",53:"rbool",54:"rfloat",55:"rchar",56:"sand",57:"sor",58:"sxor",59:"snot",60:"smayque",61:"smenque",62:"smayigque",63:"smenigque",64:"sdobleig",65:"snoig",66:"smenos",67:"smas",68:"spor",69:"sdiv",71:"tkstring",72:"tkstring2",73:"rfalse",74:"rtrue",75:"tkflotante",76:"tkentero",77:"adicion",78:"sustraccion"},
productions_: [0,[3,2],[6,9],[4,2],[4,1],[16,6],[16,5],[17,1],[17,1],[18,1],[18,1],[21,2],[21,1],[21,2],[21,1],[21,2],[21,1],[21,2],[21,1],[28,6],[28,5],[28,5],[28,6],[28,1],[27,6],[27,5],[27,5],[27,6],[30,1],[30,2],[32,4],[32,2],[34,2],[34,1],[34,2],[34,1],[34,2],[34,1],[36,1],[35,8],[35,5],[35,7],[43,2],[43,1],[37,6],[37,5],[45,3],[45,2],[45,1],[46,2],[46,1],[48,6],[15,2],[49,2],[49,1],[49,2],[26,3],[26,5],[26,4],[26,2],[50,3],[50,1],[29,1],[29,1],[29,1],[29,1],[29,1],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[40,2],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		this.$ = new Nodo("INI","");
		this.$.add($$[$0-1]);
		return {
					ast:this.$,
					errores:LError,
					tokens:LToken
				}
	
break;
case 2:

		this.$ = new Nodo("MAIN","");
		this.$.add($$[$0]);
	
break;
case 3: case 11: case 13: case 15: case 17: case 32: case 34: case 36: case 42: case 49:

		$$[$0-1].add($$[$0]);
		this.$ = $$[$0-1];
	
break;
case 4:

		this.$ = new Nodo("INSTRUCCIONES","");
		this.$.add($$[$0]);
	
break;
case 5:

		this.$ = new Nodo("CLASE_INTERFACE","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 6:

		this.$ = new Nodo("CLASE_INTERFACE","");
		this.$.add($$[$0-4]);
		this.$.add($$[$0-3]);
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add(new Nodo($$[$0],""));
	
break;
case 7:
this.$=new Nodo($$[$0],"");
break;
case 8:
this.$=new Nodo($$[$01],"");
break;
case 9: case 10:

		this.$ = new Nodo($$[$0],"");
	
break;
case 12: case 14: case 16: case 18:

		this.$ = new Nodo("INS_METODO","");
		this.$.add($$[$0]);
	
break;
case 19:

		this.$ = new Nodo("DEC_METODO","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 20:

		this.$ = new Nodo("DEC_METODO","");
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
	
break;
case 21:

		this.$ = new Nodo("DEC_METODO","");
		this.$.add(new Nodo($$[$0-4],""));
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add($$[$0-1]);
	
break;
case 22:

		this.$ = new Nodo("DEC_METODO","");
		this.$.add($$[$0-5]);
		this.$.add(new Nodo($$[$0-4],""));
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add($$[$0-1]);
	
break;
case 23: case 55:

		var data = [this._$.first_line,this._$.first_column,yytext,1];
		addErr(data); 
	
break;
case 24:

		this.$ = new Nodo("IMP_METODO","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 25:

		this.$ = new Nodo("IMP_METODO","");
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 26:

		this.$ = new Nodo("IMP_METODO","");
		this.$.add(new Nodo($$[$0-4],""));
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	 
break;
case 27:

		this.$ = new Nodo("IMP_METODO","");
		this.$.add($$[$0-5]);
		this.$.add(new Nodo($$[$0-4],""));
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 28:

		this.$ = new Nodo("PARAMETROS","");
		this.$.add(new Nodo($$[$0],""));
	
break;
case 29:

		this.$ = new Nodo("PARAMETROS","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 30:

		$$[$0-3].add($$[$0-1]);
		$$[$0-3].add(new Nodo($$[$0],""));
		this.$ = $$[$0-3];
	
break;
case 31:

		this.$ = new Nodo("LIST_PAR","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 33: case 35: case 37:

		this.$ = new Nodo("LI","");
		this.$.add($$[$0]);
	
break;
case 38:

		this.$ = new Nodo("SENTENCIA_CONTROL","");
		this.$.add($$[$0]);
	
break;
case 39:

		this.$ = new Nodo("FOR","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add($$[$0-2]);
		this.$.add($$[$0]);
	
break;
case 40:

		this.$ = new Nodo("WHILE","");
		this.$.add($$[$0-2]);
		this.$.add($$[$0]);
	
break;
case 41:

		this.$ = new Nodo("DO_WHILE","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-2]);
	
break;
case 43:

		this.$ = new Nodo("LISTA_IF","");
		this.$.add($$[$0]);
	
break;
case 44:

		this.$ = new Nodo("IF","");
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 45:

		this.$ = new Nodo("IF","");
		this.$.add($$[$0-2]);
		this.$.add($$[$0]);
	
break;
case 46:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 47:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 48:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add($$[$0]);
	
break;
case 50:

		this.$ = new Nodo("LELSEIF","");
		this.$.add($$[$0]);
	
break;
case 51:

		this.$ = new Nodo("ELSEIF");
		this.$.add($$[$0-2]);
	
break;
case 52:

		this.$ = new Nodo("STATCOR","");
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 53:

		this.$ = new Nodo("STATCORPRIMA","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 54:

		this.$ = new Nodo("STATCORPRIMA","");
		this.$.add(new Nodo($$[$0],""));
	
break;
case 56:

		this.$ = new Nodo("DECLARACION","");
		this.$.add($$[$0-2]);
		this.$.add($$[$0-1]);
	
break;
case 57:

		this.$ = new Nodo("DECLARACION","");
		this.$.add($$[$0-4]);
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
	
break;
case 58:

		this.$ = new Nodo("ASIGNACION","");
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
	
break;
case 59:

		var data = [this._$.first_line,this._$.first_column,yytext];
		addErr(data); 
	
break;
case 60:

		$$[$0-2].add(new Nodo($$[$0],"identificador"));
		this.$=$$[$0-2];			
	
break;
case 61:

		this.$ = new Nodo("LISTA_ID","");
		this.$.add(new Nodo($$[$0],"identificador"));
	
break;
case 62:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"int"));
	
break;
case 63:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"bool"));
	
break;
case 64:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"float"));
	
break;
case 65:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"string"));
	
break;
case 66:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"char"));
	
break;
case 67: case 68: case 69: case 71: case 72: case 73: case 74: case 75: case 76:

		this.$ = new Nodo("EXP","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 70:

		this.$ = new Nodo("EXP","")
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 77: case 83: case 84:

		this.$ = new Nodo("EXP","")
		this.$.add($$[$0]);
	
break;
case 78: case 79: case 80: case 81:
	
		this.$ = new Nodo("EXP","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 82:

		this.$ = new Nodo("EXP","")
		this.$.add($$[$0-1]);
	
break;
case 85: case 86: case 87: case 88: case 89: case 90: case 91:

		this.$ = new Nodo("VALOR","")
		this.$.add(new Nodo($$[$0],""));
	
break;
case 92: case 93:

		this.$ = new Nodo("EXP_AUMENTO","");
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add(new Nodo($$[$0],""));
	
break;
}
},
table: [{3:1,4:2,7:$V0,16:3,17:4,23:$V1},{1:[3]},{5:[1,7],7:$V0,16:8,17:4,23:$V1},o($V2,[2,4]),{18:9,24:[1,10],25:[1,11]},o([24,25],$V3),o([9,12,24,25,52,53,54,55],[2,8]),{1:[2,1]},o($V2,[2,3]),{19:[1,12]},{19:[2,9]},{19:[2,10]},{20:[1,13]},{2:$V4,6:18,7:$V5,9:$V6,12:$V7,17:23,19:$V8,21:14,22:[1,15],23:$V1,26:16,27:17,28:19,29:20,50:21,52:$V9,53:$Va,54:$Vb,55:$Vc},{2:$V4,6:35,7:$V5,9:$V6,12:$V7,17:23,19:$V8,22:[1,32],23:$V1,26:33,27:34,28:36,29:20,50:21,52:$V9,53:$Va,54:$Vb,55:$Vc},o($V2,[2,6]),o($Vd,[2,12]),o($Vd,[2,14]),o($Vd,[2,16]),o($Vd,[2,18]),{19:[1,38],50:37},{33:$Ve,51:[1,39]},o($Vd,[2,23],{31:$Vf}),{9:[1,43],12:$V7,29:42,52:$V9,53:$Va,54:$Vb,55:$Vc},{19:[1,44]},o([9,12,52,53,54,55],$V3,{8:[1,45]}),{19:[2,62]},{19:[2,63]},{19:[2,64]},{19:[2,65]},{19:[2,66]},o($Vg,$Vh),o($V2,[2,5]),o($Vd,[2,11]),o($Vd,[2,13]),o($Vd,[2,15]),o($Vd,[2,17]),{31:[1,46],33:$Ve,51:[1,47]},o($Vg,$Vh,{11:[1,48]}),{11:$Vi,19:$Vj,39:49,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{19:[1,62]},o($Vs,[2,59]),{19:[1,63]},{19:[1,64]},{11:[1,65]},{9:[1,66]},o($Vs,[2,56]),{11:$Vi,19:$Vj,39:67,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{12:$V7,14:$Vt,29:71,30:68,32:70,52:$V9,53:$Va,54:$Vb,55:$Vc},{31:[1,72],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:$Vi,19:$Vj,39:86,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:87,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:88,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},o($VH,[2,83]),o($VH,[2,84]),o($VH,[2,89],{77:$VI,78:$VJ}),o($VH,[2,85]),o($VH,[2,86]),o($VH,[2,87]),o($VH,[2,88]),o($VH,[2,90]),o($VH,[2,91]),o($Vg,[2,60]),{11:[1,91]},{11:[1,92]},{12:$V7,14:$Vt,29:71,30:93,32:70,52:$V9,53:$Va,54:$Vb,55:$Vc},{10:[1,94]},{31:[1,95],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{15:96,20:$VK,31:[1,97]},o($VL,[2,28]),{14:[1,99],33:[1,100]},{19:[1,101]},o($Vs,[2,58]),{11:$Vi,19:$Vj,39:102,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:103,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:104,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:105,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:106,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:107,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:108,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:109,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:110,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:111,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:112,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:113,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{11:$Vi,19:$Vj,39:114,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},o($VH,[2,70]),o($VH,[2,77]),{14:[1,115],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($VH,[2,92]),o($VH,[2,93]),{12:$V7,14:$Vt,29:71,30:116,32:70,52:$V9,53:$Va,54:$Vb,55:$Vc},{12:$V7,14:$Vt,29:71,30:117,32:70,52:$V9,53:$Va,54:$Vb,55:$Vc},{15:118,20:$VK,31:[1,119]},{11:[1,120]},o($Vs,[2,57]),o($Vd,[2,25]),o($Vd,[2,20]),{2:[1,124],12:$V7,19:$V8,22:[1,123],26:125,29:128,34:122,35:126,36:127,37:132,38:$VM,41:$VN,42:$VO,44:$VP,49:121,50:21,52:$V9,53:$Va,54:$Vb,55:$Vc},o($VL,[2,29]),{12:$V7,29:134,52:$V9,53:$Va,54:$Vb,55:$Vc},o($VQ,[2,31]),o([14,31,56,57],[2,67],{58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o([14,31,57],[2,68],{56:$Vu,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($VH,[2,69]),o($VR,[2,71],{58:$Vw,66:$VD,67:$VE,68:$VF,69:$VG}),o($VR,[2,72],{58:$Vw,66:$VD,67:$VE,68:$VF,69:$VG}),o($VR,[2,73],{58:$Vw,66:$VD,67:$VE,68:$VF,69:$VG}),o($VR,[2,74],{58:$Vw,66:$VD,67:$VE,68:$VF,69:$VG}),o($VS,[2,75],{58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,66:$VD,67:$VE,68:$VF,69:$VG}),o($VS,[2,76],{58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,66:$VD,67:$VE,68:$VF,69:$VG}),o($VT,[2,78],{58:$Vw,68:$VF,69:$VG}),o($VT,[2,79],{58:$Vw,68:$VF,69:$VG}),o($VU,[2,80],{58:$Vw}),o($VU,[2,81],{58:$Vw}),o($VH,[2,82]),{15:135,20:$VK,31:[1,136]},{15:137,20:$VK,31:[1,138]},o($Vd,[2,26]),o($Vd,[2,21]),{12:[1,139]},o($VV,[2,52]),{2:$VW,12:$V7,19:$V8,22:[1,140],26:141,29:128,35:142,36:143,37:132,38:$VM,41:$VN,42:$VO,44:$VP,50:21,52:$V9,53:$Va,54:$Vb,55:$Vc},o($VV,[2,54]),{22:[1,145],31:$Vf},o($VX,[2,33]),o($VX,[2,35]),o($VX,[2,37]),{19:$V8,50:37},{11:[1,146]},{11:[1,147]},{15:148,20:$VK},o($VX,[2,38]),{11:[1,149]},{19:[1,150]},o($Vd,[2,24]),o($Vd,[2,19]),o($Vd,[2,27]),o($Vd,[2,22]),{13:[1,151]},o($VV,[2,53]),o($VX,[2,32]),o($VX,[2,34]),o($VX,[2,36]),{31:$Vf},o($VV,[2,55]),{2:$VW,12:$V7,19:$V8,26:152,29:128,50:21,52:$V9,53:$Va,54:$Vb,55:$Vc},{11:$Vi,19:$Vj,39:153,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{41:[1,154]},{11:$Vi,19:$Vj,39:155,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},o($VQ,[2,30]),{14:[1,156]},{11:$Vi,19:$Vj,39:157,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{14:[1,158],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:[1,159]},{14:[1,160],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{15:161,20:$VK},{31:[1,162],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{15:163,20:$VK},{11:$Vi,19:$Vj,39:164,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{15:165,20:$VK},o($Vd,[2,2]),{19:[1,167],40:166},o($VX,[2,40]),{14:[1,168],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($VX,[2,45],{45:169,46:170,48:172,47:[1,171]}),{14:[1,173]},{77:$VI,78:$VJ},{31:[1,174]},o($VX,[2,44]),o($VX,[2,48],{48:176,47:[1,175]}),{15:177,20:$VK,44:$VY},o($VZ,[2,50]),{15:179,20:$VK},o($VX,[2,41]),{15:180,20:$VK,44:$VY},o($VZ,[2,49]),o($VX,[2,47]),{11:[1,181]},o($VX,[2,39]),o($VX,[2,46]),{11:$Vi,19:$Vj,39:182,40:53,59:$Vk,66:$Vl,70:54,71:$Vm,72:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr},{14:[1,183],56:$Vu,57:$Vv,58:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{15:184,20:$VK},o($VZ,[2,51])],
defaultActions: {7:[2,1],10:[2,9],11:[2,10],26:[2,62],27:[2,63],28:[2,64],29:[2,65],30:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //var AST = require("../AST/Entornos/AST");
	const {Nodo} = require('../Interprete/Nodo');

    const {ListaToken} = require("../Interprete/ListaToken");
    const {Token} = require("../Interprete/Token");
    var LToken = new ListaToken();

	function addToken(data)
	{
		LToken.insertar(new Token(data[0],data[1],data[2],data[3]));
	}

	//Llenando en una lista los errores obtenidos
    const {ListaError} = require("../Interprete/ListaError");
    const {Error} = require("../Interprete/Error");
    var LError = new ListaError();

    function addErr(data) 
    {
		var descripcion = "";
		var tipo  =  data[data.length-1];
		let linea = data[0];
		let columna = data[1];
		if(tipo == 0)//Es un error lexico
		{
		 	descripcion = "El caracter: "+data[2]+" No pertenece al lenguaje";
			tipo = "Lexico";
		}else//Es un error sintactico
		{ 
		 	descripcion = "No se esperaba "+data[2]+"";
			tipo = "Sintactico";
		}

        LError.insertar(new Error(tipo,linea,columna,descripcion)); 
    }

	


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:
						var tipo = 'rpublic';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 4:
						var tipo = 'rprivate';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 5:
						var tipo = 'rstatic';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 6:
						var tipo = 'rstring';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 7:
						var tipo = 'rargs';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 8:
						var tipo = 'rmain';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 9:
						var tipo = 'rclass';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 10:
						var tipo = 'rinterface';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 11:
						var tipo = 'rfalse';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 12:
						var tipo = 'rtrue';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 13:
						var tipo = 'rint';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 14:
						var tipo = 'rbool';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 15:
						var tipo = 'rfloat';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 16:
						var tipo = 'rstring';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 17:
						var tipo = 'rchar';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 18:
						var tipo = 'rvoid';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 19:
						var tipo = 'rwhile';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 20:
						var tipo = 'rdo';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 21:
						var tipo = 'rif';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 22:
						var tipo = 'relse';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 23:
						var tipo = 'rfor';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 24:
						var tipo = 'rswitch';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 25:
						var tipo = 'rcase';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 26:
						var tipo = 'rdefault';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 27:
						var tipo = 'rbreak';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 28:
						var tipo = 'sdospuntos';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 29:
						var tipo = 'spuntocoma';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 30:
						var tipo = 'scoma';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 31:
						var tipo = 'sllaveizq';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 32:
						var tipo = 'sllaveder';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 33:
						var tipo = 'sparizq';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 34:
						var tipo = 'sparder';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 35:
						var tipo = 'adicion';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 36:
						var tipo = 'sustraccion';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 37:
						var tipo = 'smasigual';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 38:
						var tipo = 'smenosigual';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 39:
						var tipo = 'sporigual';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 40:
						var tipo = 'sdivigual';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 41:
						var tipo = 'sand';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 42:
						var tipo = 'sor';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 43:
						var tipo = 'smas';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 44:
						var tipo = 'smenos';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 45:
						var tipo = 'spor';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 46:
						var tipo = 'sdiv';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 47:
						var tipo = 'smenigque';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 48:
						var tipo = 'smayigque';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 49:
						var tipo = 'sdobleig';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 50:
						var tipo = 'snoig';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 51:
						var tipo = 'smenque';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 52:
						var tipo = 'smayque';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 53:
						var tipo = 'sigual';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 54:
						var tipo = 'sxor';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 55:
						var tipo = 'snot';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 56:
						var tipo = 'tkentero';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 57:
						var tipo = 'tkflotante';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 58:
						var tipo = 'tkidentificador';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 59:
						var tipo = 'tkstring';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 60:
						var tipo = 'tkstring2';
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column,tipo,yy_.yytext];
						addToken(data);
						return tipo;      
					
break;
case 61:return 5;
break;
case 62: 
						
						var data = [yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext,0];
						addErr(data); 
					
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:static\b)/i,/^(?:String\[\])/i,/^(?:args\b)/i,/^(?:main\b)/i,/^(?:class\b)/i,/^(?:INTERFACE\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:int\b)/i,/^(?:bool\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:([\"][^"]*[\"]))/i,/^(?:([\'][^']*[\']))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}