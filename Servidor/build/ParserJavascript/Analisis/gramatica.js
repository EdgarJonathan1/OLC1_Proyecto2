/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[5,13,14],$V3=[15,16,24,47,48,49,50,51],$V4=[1,27],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[9,12,13,14,47,48,49,50,51],$Vb=[1,34],$Vc=[27,34,45],$Vd=[1,44],$Ve=[1,46],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,47],$Vj=[1,45],$Vk=[9,12,13,14,32,35,36,38,47,48,49,50,51],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[25,34,55,56,57,58,59,60],$Vs=[1,72],$Vt=[25,34,55,56],$Vu=[25,34,55,56,57,58],$Vv=[1,77],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,93],$VA=[25,27],$VB=[9,12,13,14,32,35,36,38,41,47,48,49,50,51],$VC=[9,12,32,35,36,38,47,48,49,50,51],$VD=[1,128],$VE=[9,12,32,35,36,38,41,47,48,49,50,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"MODIFICADOR":7,"CLASE_INTERFACE":8,"tkidentificador":9,"sllaveizq":10,"DECLARACION_METODO":11,"sllaveder":12,"rpublic":13,"rprivate":14,"rclass":15,"rinterface":16,"DECLARACION":17,"ASIGNACION":18,"METODO":19,"TIPO_DATO":20,"sparizq":21,"PARAMETROS":22,"STATCOR":23,"rvoid":24,"sparder":25,"LIST_PAR":26,"scoma":27,"LI":28,"SENTENCIA_REPETICION":29,"SENTENCIA_CONTROL":30,"IF":31,"rfor":32,"EXPRESION":33,"spuntocoma":34,"rwhile":35,"rdo":36,"LISTA_IF":37,"rif":38,"OTHERELSE":39,"LELSEIF":40,"relse":41,"ELSEIF":42,"STATCORPRIMA":43,"LISTA_ID":44,"sigual":45,"VALOR":46,"rint":47,"rbool":48,"rfloat":49,"rstring":50,"rchar":51,"tkstring":52,"rfalse":53,"rtrue":54,"sor":55,"sand":56,"smas":57,"smenos":58,"spor":59,"sdiv":60,"tkflotante":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tkidentificador",10:"sllaveizq",12:"sllaveder",13:"rpublic",14:"rprivate",15:"rclass",16:"rinterface",21:"sparizq",24:"rvoid",25:"sparder",27:"scoma",32:"rfor",34:"spuntocoma",35:"rwhile",36:"rdo",38:"rif",41:"relse",45:"sigual",47:"rint",48:"rbool",49:"rfloat",50:"rstring",51:"rchar",52:"tkstring",53:"rfalse",54:"rtrue",55:"sor",56:"sand",57:"smas",58:"smenos",59:"spor",60:"sdiv",61:"tkflotante"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[7,1],[7,1],[8,1],[8,1],[11,2],[11,1],[11,2],[11,1],[11,2],[11,1],[19,6],[19,6],[22,1],[22,2],[26,4],[26,2],[28,2],[28,1],[28,2],[28,1],[28,2],[28,1],[28,2],[28,1],[30,1],[29,9],[29,5],[29,9],[37,2],[37,1],[31,6],[31,5],[39,3],[39,2],[39,1],[40,2],[40,1],[42,6],[23,2],[43,2],[43,1],[17,3],[17,5],[18,4],[44,3],[44,1],[20,1],[20,1],[20,1],[20,1],[20,1],[46,1],[46,1],[46,1],[46,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,3],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		this.$ = new Nodo("INI","");
		this.$.add($$[$0-1]);

		return {ast:this.$,tbl:tbl_error}
	
break;
case 2: case 10: case 12: case 14: case 22: case 24: case 26: case 28: case 34: case 41:

		$$[$0-1].add($$[$0]);
		this.$ = $$[$0-1];
	
break;
case 3:

		this.$ = new Nodo("INSTRUCCIONES","");
		this.$.add($$[$0]);
	
break;
case 4:

		this.$ = new Nodo("CLASE_INTERFACE","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 5:

		this.$ = new Nodo("CLASE_INTERFACE","");
		this.$.add($$[$0-4]);
		this.$.add($$[$0-3]);
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add(new Nodo($$[$0],""));
	
break;
case 6:
this.$=new Nodo($$[$0],"");
break;
case 7:
this.$=new Nodo($$[$01],"");
break;
case 8: case 9:

		this.$ = new Nodo($$[$0],"");
	
break;
case 11: case 13: case 15:

		this.$ = new Nodo("DECLARACION_METODO","");
		this.$.add($$[$0]);
	
break;
case 16:

		this.$ = new Nodo("METODO","");
		this.$.add($$[$0-5]);
		this.$.add($$[$0-4]);
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 17:

		this.$ = new Nodo("METODO","");
		this.$.add($$[$0-5]);
		this.$.add(new Nodo($$[$0-4],""));
		this.$.add(new Nodo($$[$0-3],""));
		this.$.add(new Nodo($$[$0-2],""));
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 18:

		this.$ = new Nodo("PARAMETROS","");
		this.$.add(new Nodo($$[$0],""));
	
break;
case 19:

		this.$ = new Nodo("PARAMETROS","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 20:

		$$[$0-3].add($$[$0-1]);
		$$[$0-3].add(new Nodo($$[$0],""));
		this.$ = $$[$0-3];
	
break;
case 21:

		this.$ = new Nodo("LIST_PAR","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 23: case 25: case 27: case 29:

		this.$ = new Nodo("LI","");
		this.$.add($$[$0]);
	
break;
case 30:

		this.$ = new Nodo("SENTENCIA_CONTROL","");
		this.$.add($$[$0]);
	
break;
case 31:

		this.$ = new Nodo("FOR","");
		this.$.add($$[$0-6]);
		this.$.add($$[$0-4]);
		this.$.add($$[$0-2]);
		this.$.add($$[$01]);
	
break;
case 32:

		this.$ = new Nodo("WHILE","");
		this.$.add($$[$0-2]);
		this.$.add($$[$01]);
	
break;
case 33:

		this.$ = new Nodo("DO_WHILE","");
		this.$.add($$[$0-6]);
		this.$.add($$[$0-2]);
	
break;
case 35:

		this.$ = new Nodo("LISTA_IF","");
		this.$.add($$[$0]);
	
break;
case 36:

		this.$ = new Nodo("IF","");
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
		this.$.add($$[$0]);
	
break;
case 37:

		this.$ = new Nodo("IF","");
		this.$.add($$[$0-2]);
		this.$.add($$[$0]);
	
break;
case 38:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"relse"));
		this.$.add($$[$0]);
	
break;
case 39:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add(new Nodo($$[$0-1],"relse"));
		this.$.add($$[$0]);
	
break;
case 40:

		this.$ = new Nodo("OTHERELSE","");
		this.$.add($$[$0]);
	
break;
case 42:

		this.$ = new Nodo("LELSEIF","");
		this.$.add($$[$0]);
	
break;
case 43:

		this.$ = new Nodo("ELSEIF");
		this.$.add($$[$0-2]);
	
break;
case 44:

		this.$ = new Nodo("STATCOR","");
		this.$.add(new Nodo($$[$0-1],""));
		this.$.add($$[$0]);
	
break;
case 45:

		this.$ = new Nodo("STATCORPRIMA","");
		this.$.add($$[$0-1]);
		this.$.add(new Nodo($$[$0],""));
	
break;
case 46:

		this.$ = new Nodo("STATCORPRIMA","");
		this.$.add(new Nodo($$[$0],""));
	
break;
case 47:

		this.$ = new Nodo("DECLARACION","");
		this.$.add($$[$0-2]);
		this.$.add($$[$0-1]);
	 
break;
case 48:

		this.$ = new Nodo("DECLARACION","");
		this.$.add($$[$0-4]);
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
	 
break;
case 49:

		this.$ = new Nodo("ASIGNACION","");
		this.$.add($$[$0-3]);
		this.$.add($$[$0-1]);
	 
break;
case 50:

		$$[$0-2].add(new Nodo($$[$0],"identificador"));
		this.$=$$[$0-2];			
	
break;
case 51:

		this.$ = new Nodo("LISTA_ID","");
		this.$.add(new Nodo($$[$0],"identificador"));
	
break;
case 52:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"int"));
	
break;
case 53:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"bool"));
	
break;
case 54:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"float"));
	
break;
case 55:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"string"));
	
break;
case 56:

		this.$ = new Nodo("TIPO_DATO","");
		this.$.add(new Nodo($$[$0],"char"));
	
break;
case 57:

		this.$ = new Nodo("VALOR","")
		this.$.add(new Nodo($$[$0],"string"));
	
break;
case 58:

		this.$ = new Nodo("VALOR","")
		this.$.add(new Nodo($$[$0],"false"));
	
break;
case 59:

		this.$ = new Nodo("VALOR","")
		this.$.add(new Nodo($$[$0],"true"));
	
break;
case 60:

		this.$ = new Nodo("VALOR","")
		this.$.add($$[$0]);
	
break;
case 61:
	
		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"or"));
		this.$.add($$[$0]);
	
break;
case 62:

		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"and"));
		this.$.add($$[$0]);
	
break;
case 63:
	
		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"suma"));
		this.$.add($$[$0]);
	
break;
case 64:
	
		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"resta"));
		this.$.add($$[$0]);
	
break;
case 65:
	
		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"multiplicacion"));
		this.$.add($$[$0]);
	
break;
case 66:
	
		this.$ = new Nodo("E","")
		this.$.add($$[$0-2]);
		this.$.add(new Nodo($$[$0-1],"division"));
		this.$.add($$[$0]);
	
break;
case 67:

		this.$ = new Nodo("E","")
		this.$.add(new Nodo($$[$0],"id"));
	
break;
case 68:

		this.$ = new Nodo("E","")
		this.$.add(new Nodo($$[$0],"flotante"));
	
break;
case 69:

		this.$ = new Nodo("E","")
		this.$.add($$[$0-1]);
	
break;
case 70:

		this.$ = new Nodo("E","")
		this.$.add($$[$0]);
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,13:$V0,14:$V1},{1:[3]},{5:[1,7],6:8,7:4,13:$V0,14:$V1},o($V2,[2,3]),{8:9,15:[1,10],16:[1,11]},o($V3,[2,6]),o($V3,[2,7]),{1:[2,1]},o($V2,[2,2]),{9:[1,12]},{9:[2,8]},{9:[2,9]},{10:[1,13]},{7:21,9:$V4,11:14,12:[1,15],13:$V0,14:$V1,17:16,18:17,19:18,20:19,44:20,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{7:21,9:$V4,12:[1,28],13:$V0,14:$V1,17:29,18:30,19:31,20:19,44:20,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($V2,[2,5]),o($Va,[2,11]),o($Va,[2,13]),o($Va,[2,15]),{9:$V4,44:32},{27:$Vb,45:[1,33]},{20:35,24:[1,36],47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{9:[2,56]},o($Vc,[2,51]),o($V2,[2,4]),o($Va,[2,10]),o($Va,[2,12]),o($Va,[2,14]),{27:$Vb,34:[1,37],45:[1,38]},{9:$Vd,21:$Ve,33:43,46:39,52:$Vf,53:$Vg,54:$Vh,58:$Vi,61:$Vj},{9:[1,48]},{9:[1,49]},{9:[1,50]},o($Vk,[2,47]),{9:$Vd,21:$Ve,33:43,46:51,52:$Vf,53:$Vg,54:$Vh,58:$Vi,61:$Vj},{34:[1,52]},{34:[2,57]},{34:[2,58]},{34:[2,59]},{34:[2,60],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($Vr,[2,67]),o($Vr,[2,68]),{9:$Vd,21:$Ve,33:59,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:60,58:$Vi,61:$Vj},o($Vc,[2,50]),{21:[1,61]},{21:[1,62]},{34:[1,63]},o($Vk,[2,49]),{9:$Vd,21:$Ve,33:64,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:65,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:66,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:67,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:68,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:69,58:$Vi,61:$Vj},{25:[1,70],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($Vr,[2,70]),{20:74,22:71,25:$Vs,26:73,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{20:74,22:75,25:$Vs,26:73,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($Vk,[2,48]),o($Vt,[2,61],{57:$Vn,58:$Vo,59:$Vp,60:$Vq}),o($Vt,[2,62],{57:$Vn,58:$Vo,59:$Vp,60:$Vq}),o($Vu,[2,63],{59:$Vp,60:$Vq}),o($Vu,[2,64],{59:$Vp,60:$Vq}),o($Vr,[2,65]),o($Vr,[2,66]),o($Vr,[2,69]),{10:$Vv,23:76},{10:[2,18]},{25:[1,78],27:[1,79]},{9:[1,80]},{10:$Vv,23:81},o($Va,[2,16]),{9:$V4,12:[1,84],17:86,18:85,20:19,28:83,29:87,30:88,31:92,32:$Vw,35:$Vx,36:$Vy,38:$Vz,43:82,44:20,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},{10:[2,19]},{20:94,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($VA,[2,21]),o($Va,[2,17]),o($VB,[2,44]),{9:$V4,12:[1,95],17:97,18:96,20:19,29:98,30:99,31:92,32:$Vw,35:$Vx,36:$Vy,38:$Vz,44:20,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9},o($VB,[2,46]),o($VC,[2,23]),o($VC,[2,25]),o($VC,[2,27]),o($VC,[2,29]),{21:[1,100]},{21:[1,101]},{10:[1,102]},o($VC,[2,30]),{21:[1,103]},{9:[1,104]},o($VB,[2,45]),o($VC,[2,22]),o($VC,[2,24]),o($VC,[2,26]),o($VC,[2,28]),{9:$Vd,21:$Ve,33:105,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:106,58:$Vi,61:$Vj},{10:$Vv,23:107},{9:$Vd,21:$Ve,33:108,58:$Vi,61:$Vj},o($VA,[2,20]),{34:[1,109],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{25:[1,110],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{12:[1,111]},{25:[1,112],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{9:$Vd,21:$Ve,33:113,58:$Vi,61:$Vj},{10:$Vv,23:114},{35:[1,115]},{10:$Vv,23:116},{34:[1,117],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},o($VC,[2,32]),{21:[1,118]},o($VC,[2,37],{39:119,40:120,42:122,41:[1,121]}),{9:$Vd,21:$Ve,33:123,58:$Vi,61:$Vj},{9:$Vd,21:$Ve,33:124,58:$Vi,61:$Vj},o($VC,[2,36]),o($VC,[2,40],{42:126,41:[1,125]}),{10:$Vv,23:127,38:$VD},o($VE,[2,42]),{25:[1,129],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{25:[1,130],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{10:$Vv,23:131,38:$VD},o($VE,[2,41]),o($VC,[2,39]),{21:[1,132]},{10:$Vv,23:133},{34:[1,134]},o($VC,[2,38]),{9:$Vd,21:$Ve,33:135,58:$Vi,61:$Vj},o($VC,[2,31]),o($VC,[2,33]),{25:[1,136],55:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq},{10:$Vv,23:137},o($VE,[2,43])],
defaultActions: {7:[2,1],10:[2,8],11:[2,9],22:[2,52],23:[2,53],24:[2,54],25:[2,55],26:[2,56],40:[2,57],41:[2,58],42:[2,59],72:[2,18],78:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //var AST = require("../AST/Entornos/AST");
	const {Nodo} = require('../Interprete/Nodo');
	const tbl_error=[];
	


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 13
break;
case 4:return 14
break;
case 5:return 15
break;
case 6:return 16
break;
case 7:return 53
break;
case 8:return 54
break;
case 9:return 47;
break;
case 10:return 48;
break;
case 11:return 49;
break;
case 12:return 50;
break;
case 13:return 51; 
break;
case 14:return 24; 
break;
case 15:return 35;
break;
case 16:return 36;
break;
case 17:return 38;
break;
case 18:return 41;
break;
case 19:return 32;
break;
case 20:return 'rswitch';
break;
case 21:return 'rcase';
break;
case 22:return 'rdefault';
break;
case 23:return 'rbreak';
break;
case 24:return 'sdospuntos';
break;
case 25:return 34;
break;
case 26:return 27;
break;
case 27:return 10;
break;
case 28:return 12;
break;
case 29:return 21;
break;
case 30:return 25;
break;
case 31:return 'smasigual';
break;
case 32:return 'smenosigual';
break;
case 33:return 'sporigual';
break;
case 34:return 'sdivigual';
break;
case 35:return 56
break;
case 36:return 55;
break;
case 37:return 57;
break;
case 38:return 58;
break;
case 39:return 59;
break;
case 40:return 60;
break;
case 41:return 'smenigque';
break;
case 42:return 'smayigque';
break;
case 43:return 'sdobleig';
break;
case 44:return 'snoig';
break;
case 45:return 'smenque';
break;
case 46:return 'smayque';
break;
case 47:return 45;
break;
case 48:return 'snot';
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 52; 
break;
case 50:return 61;
break;
case 51:return 'tkentero';
break;
case 52:return 9;
break;
case 53:return 5;
break;
case 54: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:class\b)/i,/^(?:INTERFACE\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:int\b)/i,/^(?:bool\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}